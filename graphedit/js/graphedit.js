// Generated by CoffeeScript 1.7.1
(function() {
  var $, GraphEdit,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = window.jQuery;

  "use strict";

  GraphEdit = (function() {
    function GraphEdit(element, options) {
      this.getEdges = __bind(this.getEdges, this);
      this.getNodes = __bind(this.getNodes, this);
      this.newNode = __bind(this.newNode, this);
      this.newEdge = __bind(this.newEdge, this);
      this.zoomOut = __bind(this.zoomOut, this);
      this.zoomIn = __bind(this.zoomIn, this);
      this.toolbarTemplate = __bind(this.toolbarTemplate, this);
      this.renderToolbar = __bind(this.renderToolbar, this);
      this.removeRelatedEdges = __bind(this.removeRelatedEdges, this);
      this.remove = __bind(this.remove, this);
      this.addLink = __bind(this.addLink, this);
      this.addNode = __bind(this.addNode, this);
      this.getNodeIndex = __bind(this.getNodeIndex, this);
      this.restart = __bind(this.restart, this);
      this.resetForce = __bind(this.resetForce, this);
      this.redraw = __bind(this.redraw, this);
      this.select = __bind(this.select, this);
      this.drawSelection = __bind(this.drawSelection, this);
      this.displaySelection = __bind(this.displaySelection, this);
      this.tick = __bind(this.tick, this);
      this.method = __bind(this.method, this);
      var $el, a, me;
      $el = $(element);
      $el.append("<div class=\"graphedit-toolbar\"></div>\n<div class=\"row\">\n  <div class=\"graphedit-graph col-sm-8\"></div>\n  <div class=\"graphedit-dataview col-sm-4\"></div>\n</div>");
      this.TOOLBAR = $el.find('.graphedit-toolbar');
      this.GRAPH = $el.find('.graphedit-graph');
      this.DATAVIEW = $el.find('.graphedit-dataview');
      me = this;
      this.renderToolbar();
      this.width = this.GRAPH.innerWidth();
      this.height = 500;
      this.colors = d3.scale.category10();
      this.scale = 0;
      this.translate = 0;
      this.active_selection = [];
      this.mousedown_node = false;
      this.zoom = d3.behavior.zoom().scaleExtent([.1, 8]).on("zoom", this.redraw);
      this.canvas = d3.select(this.GRAPH.get(0)).append("svg").on("click", function() {
        if (!d3.event.target.classList.contains("node")) {
          return me.clearSelection();
        }
      });
      this.svg = this.canvas.attr("width", this.width).attr("height", this.height).attr("viewBox", "0 0 " + this.width + " " + this.height).attr("preserveAspectRatio", "xMidYMid meet").attr("pointer-events", "all").call(this.zoom).append("g");
      this.node_data = (function() {
        var _i, _results;
        _results = [];
        for (a = _i = 1; _i <= 4; a = ++_i) {
          _results.push({
            id: a,
            reflexive: false
          });
        }
        return _results;
      })();
      this.link_data = [
        {
          "source": 1,
          "target": 3,
          "value": 4
        }, {
          "source": 1,
          "target": 3,
          "value": 4
        }
      ];
      this.force = d3.layout.force().size([this.width, this.height]).linkDistance(150).charge(-500).on('tick', this.tick).start();
      this.nodes = this.svg.selectAll(".node");
      this.links = this.svg.selectAll(".link");
      this.restart();
    }

    GraphEdit.prototype._constructor = GraphEdit;

    GraphEdit.prototype.method = function() {
      alert("I am a method");
      return 0;
    };

    GraphEdit.prototype.tick = function() {
      this.nodes.attr("cx", function(d) {
        return d.x;
      });
      this.nodes.attr("cy", function(d) {
        return d.y;
      });
      this.links.attr("x1", function(d) {
        return d.source.x;
      });
      this.links.attr("y1", function(d) {
        return d.source.y;
      });
      this.links.attr("x2", function(d) {
        return d.target.x;
      });
      return this.links.attr("y2", function(d) {
        return d.target.y;
      });
    };

    GraphEdit.prototype.clearSelection = function() {
      d3.selectAll(this.active_selection).classed("active-node", false).call(function(node) {
        return node.data().selected = false;
      });
      this.active_selection = [];
      this.TOOLBAR.find('.graphedit-toolbar-remove').attr('disabled', 'disabled');
      this.TOOLBAR.find('.graphedit-toolbar-new-edge').attr('disabled', 'disabled');
      return this.displaySelection();
    };

    GraphEdit.prototype.displaySelection = function(data) {
      if (data) {
        return this.DATAVIEW.html("<pre>" + JSON.stringify(data.properties, null, 2) + "</pre>");
      } else if (this.active_selection.length === 0) {
        return this.DATAVIEW.html("");
      } else if (this.active_selection.length === 1) {
        return this.DATAVIEW.html("<pre>" + JSON.stringify(d3.select(this.active_selection[0]).data()[0].properties, null, 2) + "</pre>");
      }
    };

    GraphEdit.prototype.drawSelection = function() {
      d3.selectAll(this.active_selection).classed("active-node", true);
      return this.displaySelection();
    };

    GraphEdit.prototype.select = function(node) {
      var d, _i, _len, _ref;
      if (!d3.event.shiftKey) {
        this.clearSelection();
      }
      this.active_selection.push(node);
      this.TOOLBAR.find('.graphedit-toolbar-remove').removeAttr('disabled');
      if (this.active_selection.length === 2) {
        this.TOOLBAR.find('.graphedit-toolbar-new-edge').removeAttr('disabled');
      } else {
        this.TOOLBAR.find('.graphedit-toolbar-new-edge').attr('disabled', 'disabled');
      }
      _ref = d3.select(node).data();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        d.selected = true;
      }
      return this.drawSelection();
    };

    GraphEdit.prototype.redraw = function() {
      if (!this.mousedown_node) {
        return this.svg.attr("transform", "translate(" + d3.event.translate + ")" + "scale(" + d3.event.scale + ")");
      }
    };

    GraphEdit.prototype.resetForce = function() {
      return this.force.links(this.link_data).nodes(this.node_data).start();
    };

    GraphEdit.prototype.restart = function() {
      var me;
      me = this;
      this.links = this.links.data(this.link_data);
      this.links.style("stroke", "#000").attr("class", "link");
      this.links.enter().insert("line", ".node").attr("class", "link").style("stroke", "#000").style("stroke-width", function() {
        return 1;
      });
      this.links.exit().remove();
      this.nodes = this.nodes.data(this.node_data);
      this.nodes.style("fill", function(d) {
        return me.colors(d.node_id);
      });
      this.nodes.enter().append("circle").attr("class", "node").attr("r", 5).style("fill", function(d) {
        return me.colors(d.node_id);
      }).call(me.force.drag).on("mouseover", function() {
        return me.displaySelection(d3.select(this).data()[0]);
      }).on("mouseout", function() {
        return me.displaySelection();
      }).on("mousedown", function() {
        me.mousedown_node = true;
        me.scale = me.zoom.scale();
        me.translate = me.zoom.translate();
        return me.select(this);
      }).on("mouseup", function() {
        me.mousedown_node = false;
        me.zoom.scale(me.scale);
        return me.zoom.translate(me.translate);
      });
      this.nodes.exit().remove();
      return this.resetForce();
    };

    GraphEdit.prototype.getNodeIndex = function(node_id) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.node_data.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.node_data[i].node_id === node_id) {
          return i;
        }
      }
      return -1;
    };

    GraphEdit.prototype.addNode = function(node) {
      node = {
        'properties': node
      };
      node.node_id = node.properties.node_id;
      this.node_data.push(node);
      return this.restart();
    };

    GraphEdit.prototype.addLink = function(link) {
      link['source'] = this.getNodeIndex(link['src']);
      link['target'] = this.getNodeIndex(link['dest']);
      this.link_data.push(link);
      return this.restart();
    };

    GraphEdit.prototype.remove = function() {
      var d, _i, _len, _ref;
      if (this.active_selection.length > 0) {
        _ref = d3.selectAll(this.active_selection).data();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          this.node_data.splice(this.node_data.indexOf(d), 1);
          this.removeRelatedEdges(d);
        }
      }
      this.restart();
      return this.clearSelection();
    };

    GraphEdit.prototype.removeRelatedEdges = function(d) {
      var me, to_remove;
      me = this;
      to_remove = this.link_data.filter(function(l) {
        return l.source === d || l.target === d;
      });
      to_remove.map(function(l) {
        return me.link_data.splice(me.link_data.indexOf(l), 1);
      });
      return this.restart();
    };

    GraphEdit.prototype.renderToolbar = function() {
      var me;
      me = this;
      this.TOOLBAR.html(this.toolbarTemplate());
      this.TOOLBAR.find('.graphedit-toolbar-zoomin').on('click', this.zoomIn);
      this.TOOLBAR.find('.graphedit-toolbar-zoomout').on('click', this.zoomOut);
      this.TOOLBAR.find('.graphedit-toolbar-remove').on('click', this.remove);
      this.TOOLBAR.find('.graphedit-toolbar-new-edge').on('click', this.newEdge);
      this.TOOLBAR.find('.graphedit-toolbar-new-node').on('click', this.newNode);
      return d3.select(window).on('keydown', function() {
        var _ref;
        if ((_ref = d3.event.keyCode) === 46 || _ref === 8) {
          return me.remove();
        }
      });
    };

    GraphEdit.prototype.toolbarTemplate = function() {
      return "<div class=\"btn-group\">\n  <button type=\"button\" class=\"btn btn-default graphedit-toolbar-zoomin\"><span class=\"glyphicon glyphicon-zoom-in\"></span></button>\n  <button type=\"button\" class=\"btn btn-default graphedit-toolbar-zoomout\"><span class=\"glyphicon glyphicon-zoom-out\"></span></button>\n</div>\n<div class=\"btn-group\">\n  <button type=\"button\" class=\"btn btn-default graphedit-toolbar-new-node\"><span class=\"glyphicon glyphicon-plus-sign\"></span></button>\n  <button type=\"button\" class=\"btn btn-default graphedit-toolbar-new-edge\" disabled=\"disabled\"><span class=\"glyphicon glyphicon-resize-horizontal\"></span></button>\n  <button type=\"button\" class=\"btn btn-default graphedit-toolbar-remove\" disabled=\"disabled\"><span class=\"glyphicon glyphicon-trash\"></span></button>\n</div>";
    };

    GraphEdit.prototype.zoomIn = function() {
      var s;
      s = this.zoom.scale();
      this.zoom.center([this.width / 2, this.height / 2]);
      this.zoom.scale(s * 1.5);
      return this.zoom.event(this.svg);
    };

    GraphEdit.prototype.zoomOut = function() {
      var s;
      s = this.zoom.scale();
      this.zoom.center([this.width / 2, this.height / 2]);
      this.zoom.scale(s * 0.5);
      return this.zoom.event(this.svg);
    };

    GraphEdit.prototype.newEdge = function() {
      var dest, src;
      if (this.active_selection.length === 2) {
        src = d3.select(this.active_selection[0]).data()[0];
        dest = d3.select(this.active_selection[1]).data()[0];
        return this.addLink({
          "src": src.node_id,
          "dest": dest.node_id
        });
      }
    };

    GraphEdit.prototype._idSeq = 0;

    GraphEdit.prototype.newNode = function() {
      return this.addNode({
        node_id: "new-" + this._idSeq++
      });
    };

    GraphEdit.prototype.getNodes = function() {
      return this.node_data;
    };

    GraphEdit.prototype.getEdges = function() {
      return this.edge_data;
    };

    return GraphEdit;

  })();

  $.fn.graphEdit = function(option, params) {
    var ret;
    ret = this;
    this.each(function() {
      var $this, data;
      $this = $(this);
      data = $this.data('graphEdit');
      if (!data) {
        $this.data('graphEdit', (data = new GraphEdit(this, option)));
      }
      if (typeof option === 'string') {
        if (option === 'getNodes') {
          return ret = data.getNodes();
        } else if (option === 'getEdges') {
          return ret = data.getEdges();
        } else {
          return data[option].call($this, params);
        }
      }
    });
    return ret;
  };

  $.fn.graphEdit.Constructor = GraphEdit;

  $(function() {
    return $('body').on('click.graphEdit.data-api', '[data-pluginNameAction^=Action]', function(e) {
      return $(e.target).graphEdit();
    });
  });

}).call(this);
